1. A computer implemented method for executing an arithmetic/logical instruction having an interlocked memory operand, the arithmetic/logical instruction comprising an opcode field, a first register field specifying a first operand in a first register, a second register field specifying a second register, the second register specifying a location of a second operand in memory, and a third register field specifying a third operand in a third register, the execution of the arithmetic/logical instruction comprising:obtaining by a processor, a second operand from a location in memory specified by the second register, the second operand consisting of a value;obtaining a third operand from the third register;performing an opcode defined arithmetic operation or an opcode defined logical operation based on the obtained second operand and the obtained third operand to produce a result;storing the produced result at the location in memory specified by the second register; andsaving the value of the obtained second operand in the first register.
    2. The method according to claim 1, further comprising saving a condition code, the condition code indicating whether the result is zero or not zero.
    3. The method according to claim 1, wherein the opcode defined arithmetic operation is an arithmetic or logical ADD, and wherein the opcode defined logical operation is any one of an AND, an EXCLUSIVE-OR, or an OR, further comprising:responsive to the result of the arithmetic operation being negative, saving a condition code indicating the result is negative;responsive to the result of the arithmetic operation being positive, saving a condition code indicating the result is positive; andresponsive to the result of the arithmetic operation being an overflow, saving a condition code indicating the result is an overflow.
    4. The method according to claim 1, wherein operand size is specified by the opcode, wherein one or more first opcodes specify 32 bit operands and one or more second opcodes specify 64 bit operands.
    5. The method according to claim 1, wherein the opcode consist of two separate opcode fields, wherein the arithmetic/logical instruction further comprises a first displacement field and a second displacement field, and wherein the location in memory is determined by adding contents of the second register to a signed displacement value, the signed displacement value comprising a sign extended value of the first displacement field concatenated to the second displacement field.
    6. The method according to claim 1, further comprising:responsive to the opcode being a first opcode and the second operand not being on a 32 bit boundary, generating a specification exception; andresponsive to the opcode being a second opcode and the second operand not being on a 64 bit boundary, generating a specification exception.
    7. The method according to claim 1, wherein the processor is a processor in a multi-processor system, further comprising:preventing other processors of the multi-processor system from accessing the location in memory between obtaining the second operand therefrom and storing the produced result thereat; andupon storing the produced result, permitting other processors of the multi-processor system to access the location in memory.
    8. A computer program product for executing an arithmetic/logical instruction having an interlocked memory operand, the arithmetic/logical instruction comprising an opcode field, a first register field specifying a first operand in a first register, a second register field specifying a second register, the second register specifying a location of a second operand in memory, and a third register field specifying a third operand in a third register, the computer program product comprising a tangible storage medium readable by a processing circuit and storing instructions for execution by the processing circuit for performing a method for executing the arithmetic/logical instruction comprising:obtaining by a processor, a second operand from a location in memory specified by the second register, the second operand consisting of a value;obtaining a third operand from the third register;performing an opcode defined arithmetic operation or an opcode defined logical operation based on the obtained second operand and the obtained third operand to produce a result;storing the produced result at the location in memory specified by the second register; andsaving the value of the obtained second operand in the first register.
    9. The computer program product according to claim 8, further comprising saving a condition code, the condition code indicating whether the result is zero or not zero.
